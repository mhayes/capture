#!/usr/bin/env ruby

require "bundler"
Bundler.require
Dotenv.load

require 'json'
require 'securerandom'
require 'pathname'

ROOT_PATH = Pathname.new(File.absolute_path(File.join(File.dirname(__FILE__))))
BIN_PATH = ROOT_PATH.join("bin")
TMP_PATH = ROOT_PATH.join("tmp")

class Page
  def initialize(json)
    @id = json["id"]
    @url = json["url"]
    @selector = json["selector"]
    @width = json["width"]
    @uuid = SecureRandom.uuid
  end

  attr_reader :uuid, :id, :url, :selector, :width, :depository_url

  def cmd
    run_cmd = "#{BIN_PATH.join("webkit2png")} -F -W #{width} -D #{TMP_PATH} -o #{uuid}"
    if @selector
      run_cmd += " --selector=\"#{@selector}\""
    end
    run_cmd += " #{url}"
  end

  def capture!
    `#{cmd()}`
    return false unless $?.success?
    img_pth = TMP_PATH.join("#{uuid}-full.png")
    `pngquant #{img_pth}`
    return false unless $?.success?
    fs8_img_pth = "#{File.basename(img_pth, '.png')}-fs8.png"
    @depository_url = "#{ENV['HOST']}/#{fs8_img_pth}"
    self
  end

  def to_json(options={})
    {
      id: id,
      url: url,
      selector: selector,
      width: width,
      depository_url: depository_url
    }.to_json
  end
end

# trap SIGINT signal to gracefully stop processing

sqs = AWS::SQS.new
opts = {wait_time_seconds: 10}
capture_queue = sqs.queues[ENV["SQS_CAPTURE_QUEUE"]]
outbound_capture_queue = sqs.queues[ENV["SQS_OUTBOUND_CAPTURE_QUEUE"]]
outbound_comparison_queue = sqs.queues[ENV["SQS_OUTBOUND_COMPARISON_QUEUE"]]

capture_queue.poll(opts) do |msg|
  page = Page.new(JSON.parse(msg.body))
  if page.capture!
    outbound_comparison_queue.send_message(page.to_json)
  end
end